import numpy as np

a = 1.878
b = -1.606
c = 2.071
d = -2.839
e = -0.320
boundary_coef11 = 1
boundary_coef12 = -0.3
boundary_coef21 = 0
boundary_coef22 = 1
left = 0.6
right = 0.9


def y(x):
    return a * x ** 2 + b * x + c + 1 / (d * x + e)


def dydx(x):
    return 2*a*x + b - d/(d*x + e)**2


def dy2dx(x):
    return 2*a + 2*d**2/(d*x + e)**3


def p(x):
    return 1 / x


def q(x):
    return -0.4


def f(x):
    return dy2dx(x) + p(x) * dydx(x) + q(x) * y(x)


def triagonal_solve(a_, b_, c_, d_, n_):
    x = np.ndarray(n_)
    c_[0] /= b_[0]
    d_[0] /= b_[0]

    for i in range(1, n_):
        id_ = 1 / (b_[i] - c_[i - 1] * a_[i])
        c_[i] *= id_
        d_[i] = (d_[i] - d_[i-1] * a_[i]) * id_

    x[n_ - 1] = d_[n_ - 1]
    for i in reversed(range(0, n_ - 1)):
        x[i] = d_[i] - c_[i] * x[i + 1]

    return x


def finite_diff(n):

    left_cond = boundary_coef11 * y(left) + boundary_coef12 * dydx(left)
    right_cond = boundary_coef21 * y(left) + boundary_coef22 * dydx(right)

    h = (right - left) / n

    x0 = left - h/2
    x_net = np.ndarray(n + 2)
    y_net = np.ndarray(n + 2)

    f_net = np.ndarray(n + 2)
    for i in range(n + 2):
        x_net[i] = x0
        y_net[i] = y(x_net[i])
        f_net[i] = f(x_net[i])
        x0 += h

    a_ = np.ndarray(n + 2)
    b_ = np.ndarray(n + 2)
    c_ = np.ndarray(n + 2)
    d_ = np.ndarray(n + 2)

    for i in range(1, n + 1):
        a_[i] = 1 / h / h - p(x_net[i]) / 2 / h
        b_[i] = q(x_net[i]) - 2 / h / h
        c_[i] = 1 / h / h + p(x_net[i]) / 2 / h
        d_[i] = f_net[i]

    a_[0] = 0
    b_[0] = boundary_coef11 / 2 - boundary_coef12 / h
    c_[0] = boundary_coef11 / 2 + boundary_coef12 / h
    d_[0] = left_cond
    a_[n + 1] = boundary_coef21 / 2 - boundary_coef22 / h
    b_[n + 1] = boundary_coef21 / 2 + boundary_coef22 / h
    c_[n + 1] = 0
    d_[n + 1] = right_cond

    r = np.ndarray(n + 2)
    r = triagonal_solve(a_, b_, c_, d_, n + 2)

    e = np.ndarray(n + 2)
    norm = 0
    for i in range(n + 2):
        e[i] = abs(y_net[i] - r[i])
        norm += e[i] * e[i] * h
        print('x[i] = {:20}, numeric[i] = {:20}, exact[i] = {:20}, error[i] = {:20}'
              .format(x_net[i], r[i], y_net[i], e[i]))
    norm = np.sqrt(norm)
    print('||e|| = {:20}'.format(norm))
    return norm


def main():
    n = 30
    finite_diff(n)

    # n = 220
    # err_h = []
    # n_s = []
    # left = 0.6
    # right = 0.9
    # for i in range(10):
    #     n_s.append((right - left) / n)
    #     err_h.append(finite_diff(n))
    #     n -= 20
    # from matplotlib import pyplot as plt
    # plt.plot(n_s, err_h, marker='o')
    # plt.show()

if __name__ == '__main__':
    main()




x[i] =   0.595, numeric[i] =   1.2825571832802394, exact[i] =   1.2825796570209362, error[i] = 2.2473740696860034e-05
x[i] =   0.605, numeric[i] =   1.2959674710505555, exact[i] =   1.2959902867327662, error[i] = 2.2815682210630683e-05
x[i] =   0.615, numeric[i] =    1.309562792229132, exact[i] =   1.3095859302229926, error[i] = 2.313799386066684e-05
x[i] =   0.625, numeric[i] =   1.3233508958443236, exact[i] =   1.3233743378842135, error[i] = 2.344203988990934e-05
x[i] =   0.635, numeric[i] =    1.337339116413048, exact[i] =   1.3373628454919644, error[i] = 2.3729078916456814e-05
x[i] =   0.645, numeric[i] =   1.3515344012911452, exact[i] =   1.3515584015643922, error[i] = 2.40002732470046e-05
x[i] =   0.655, numeric[i] =   1.3659433358863935, exact[i] =   1.3659675925836587, error[i] = 2.425669726524582e-05
x[i] =   0.665, numeric[i] =   1.3805721669265332, exact[i] =   1.3805966662715388, error[i] = 2.449934500559081e-05
x[i] =   0.675, numeric[i] =   1.3954268239551335, exact[i] =   1.3954515530921265, error[i] = 2.4729136993029144e-05
x[i] =   0.685, numeric[i] =   1.4105129392107856, exact[i] =   1.4105378861372184, error[i] = 2.4946926432845018e-05
x[i] =   0.695, numeric[i] =   1.4258358660297272, exact[i] =   1.4258610195345396, error[i] = 2.5153504812358563e-05
x[i] =   0.705, numeric[i] =    1.441400695898281, exact[i] =   1.4414260455052674, error[i] = 2.534960698641342e-05
x[i] =   0.715, numeric[i] =   1.4572122742692868, exact[i] =    1.457237810185073, error[i] = 2.5535915786134566e-05
x[i] =   0.725, numeric[i] =   1.4732752152457984, exact[i] =   1.4733009283120122, error[i] = 2.571306621379499e-05
x[i] =   0.735, numeric[i] =    1.489593915225573, exact[i] =    1.489619796874825, error[i] = 2.588164925199088e-05
x[i] =   0.745, numeric[i] =    1.506172565591159, exact[i] =   1.5061986078064975, error[i] = 2.6042215338417662e-05
x[i] =   0.755, numeric[i] =   1.5230151645225682, exact[i] =   1.5230413598000974, error[i] = 2.6195277529117433e-05
x[i] =   0.765, numeric[i] =   1.5401255280025024, exact[i] =   1.5401518693168892, error[i] = 2.634131438683518e-05
x[i] =   0.775, numeric[i] =   1.5575073000778012, exact[i] =   1.5575337808504204, error[i] = 2.6480772619130732e-05
x[i] =   0.785, numeric[i] =   1.5751639624351028, exact[i] =   1.5751905765045922, error[i] = 2.6614069489339087e-05
x[i] =   0.795, numeric[i] =   1.5930988433435977, exact[i] =   1.5931255849386208, error[i] = 2.6741595023027642e-05
x[i] =   0.805, numeric[i] =   1.6113151260131502, exact[i] =    1.611341989727182, error[i] = 2.6863714031710728e-05
x[i] =   0.815, numeric[i] =    1.629815856411895, exact[i] =   1.6298428371798572, error[i] = 2.6980767962259122e-05
x[i] =   0.825, numeric[i] =   1.6486039505836578, exact[i] =   1.6486310436602594, error[i] = 2.709307660153648e-05
x[i] =   0.835, numeric[i] =   1.6676822015021397, exact[i] =   1.6677094024417738, error[i] = 2.7200939634042243e-05
x[i] =   0.845, numeric[i] =   1.6870532854957208, exact[i] =   1.6870805901338017, error[i] = 2.7304638080982713e-05
x[i] =   0.855, numeric[i] =   1.7067197682739426, exact[i] =   1.7067471727095618, error[i] = 2.7404435619216017e-05
x[i] =   0.865, numeric[i] =   1.7266841105841824, exact[i] =   1.7267116111639802, error[i] = 2.750057979783449e-05
x[i] =   0.875, numeric[i] =   1.7469486735247297, exact[i] =   1.7469762668278879, error[i] = 2.7593303158157667e-05
x[i] =   0.885, numeric[i] =   1.7675157235383652, exact[i] =   1.7675434063626323, error[i] = 2.768282426712787e-05
x[i] =   0.895, numeric[i] =   1.7883874371086392, exact[i] =     1.78841520645731, error[i] = 2.7769348670769745e-05
x[i] =    0.90, numeric[i] =    1.809565905179295, exact[i] =   1.8095937582490718, error[i] = 2.7853069776817563e-05